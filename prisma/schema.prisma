// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String

  profile Profile?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("users")
}

model Profile {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  role      String
  avatar    String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  professional Professional?
  athlete      Athlete?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("profiles")
}

//TODO check if Professional and Athlete should be removed and the profile should have a type field
model Professional {
  id String @id @default(cuid())

  trainings Training[]

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @unique @map("profile_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("professionals")
}

model Athlete {
  id String @id @default(cuid())

  training Training?

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @unique @map("profile_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("athletes")
}

//TODO update training model to receive an expiration date
model Training {
  id        String  @id @default(cuid())
  duration  String
  isExpired Boolean @default(false) @map("is_expired")

  Professional   Professional? @relation(fields: [professionalId], references: [id], onDelete: SetNull)
  professionalId String?       @map("professional_id")

  Athlete   Athlete @relation(fields: [athleteId], references: [id])
  athleteId String  @unique @map("athlete_id")

  exercisesTraining ExerciseTraining[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("trainings")
}

model Exercise {
  id          String @id @default(cuid())
  name        String
  description String

  exercisesTraining ExerciseTraining[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("exercises")
}

model ExerciseTraining {
  id          String @id @default(cuid())
  sets        Int
  repetitions Int
  interval    Int

  Training   Training @relation(fields: [trainingId], references: [id])
  trainingId String   @map("training_id")

  Exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String   @map("exercise_id")

  exerciseTechnique   ExerciseTechnique @relation(fields: [exerciseTechniqueId], references: [id])
  exerciseTechniqueId String            @map("exercise_technique_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("exercises_trainings")
}

model ExerciseTechnique {
  id   String @id @default(cuid())
  name String

  exercisesTraining ExerciseTraining[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("exercise_techniques")
}
